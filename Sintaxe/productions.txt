------------------------------------------------------------------------ Programa

program -> func_def_list | ε

------------------------------------------------------------------------ Lista de definição de funções

func_def_list -> func_def | func_def_list func_def 

------------------------------------------------------------------------ Definição de função

func_def -> 'deff' func_name func_io '{' func_body '}'

------------------------------------------------------------------------ Nome da função

func_name -> ID

------------------------------------------------------------------------ Definição de Input e Output da função

func_io -> func_input '->' func_output

------------------------------------------------------------------------ Tipos de dados 

type -> 'int' | 'double' | 'boolean'
type_list -> 'List['type']' | 'List[' type_list ']'
func_type -> type_list | type

------------------------------------------------------------------------ Input da função

func_input -> '(' incont
incont -> ')' | incontent ')'
incontent -> func_type incontent2
incontent2 -> ε | ',' incontent

------------------------------------------------------------------------ Output da função

func_output -> func_type

------------------------------------------------------------------------ Definição de corpo da função

func_body -> case_list | return_struct

------------------------------------------------------------------------ Definição do tipo de corpo "case" (Por definir "expr")

case_list -> case_struct | case_list case_struct

case_struct -> 'case' func_case_args '=' case_expr ';' 

------------------------------------------------------------------------ Argumentos do "case"

func_case_args -> '(' casecontent ')'
casecontent -> func_case_var casecontent2
casecontent2 -> ε | ',' casecontent

func_case_var = ID | pmargs | constant
pmargs -> '[]' | '(ID:ID)'

------------------------------------------------------------------------ Expressões do "case"

case_expr -> ifstmt | expr

------------------------------------------------------------------------ Definição do tipo de corpo "return"

return_struct -> 'return' retExp ';'

retExp -> func_composition | constant

func_composition -> func_name '.' func_name func_composition2
func_composition2 -> ε | '.' func_name func_composition2

------------------------------------------------------------------------ Expressões

expr -> exprNum | exprBoolean | exprList

------------------------------------------------------------------------ Expressões Numéricas

exprNum -> termNum | exprNum op_sumsub termNum
termNum -> factorNum | termNum op_multdiv factorNum
factorNum -> '(' exprNum ')' | ID | num_constant | function_call

------------------------------------------------------------------------ Expressões Booleanas

exprBoolean -> factorBoolean | exprBoolean op_logic factorBoolean 
factorBoolean -> exprComparator | '!' factorBoolean | '(' exprBoolean ')' | ID | BOOLEAN | function_call

exprComparator -> exprNum op_comparator exprNum | exprBoolean op_comparator exprBoolean | exprList op_comparator exprList

------------------------------------------------------------------------ Expressões de Listas

exprList -> exprListBoolean | exprListNum

exprListBoolean -> factorListBoolean | BOOLEAN ':' exprListBoolean  | exprListBoolean '++' exprListBoolean
factorListBoolean -> list_boolean | function_call

exprListNum -> factorListNum | num_constant ':' exprListNum  | exprListNum '++' exprListNum
factorListNum -> list_num | function_call

------------------------------------------------------------------------ If statements

ifstmt -> 'if' exprBoolean 'then' expr elifstmt 'else' expr
elifstmt -> ε | 'elif' exprBoolean 'then' expr elifstmt

------------------------------------------------------------------------ Definição de listas

list -> '[]' | list_num | list_boolean

------------------------------------------------------------------------ Listas Numéricas

list_num -> '[' list_num_content ']'
list_num_content -> num_constant list_num_content2
list_num_content2 -> ε | ',' list_num_content

------------------------------------------------------------------------ Listas Booleanas

list_boolean -> '[' list_boolean_content ']'
list_boolean_content -> BOOLEAN list_boolean_content2
list_boolean_content2 -> ε | ',' list_boolean_content

------------------------------------------------------------------------ Constantes

num_constant -> INT | DOUBLE
constant -> num_constant | BOOLEAN

------------------------------------------------------------------------ Definição das constantes

INT -> '-?[0-9]+'
DOUBLE -> '-?[0-9]+\.[0-9]+'
BOOLEAN -> 'true' | 'false'
ID -> '[a-z]\w*'

------------------------------------------------------------------------ Definição de uma chamada de função

function_call -> func_name '(' function_call_input ')'

function_call_input -> '(' fcincont
fcincont -> ')' | fcincontent ')'
fcincontent -> expr fcincontent2
fcincontent2 -> ε | ',' fcincontent

------------------------------------------------------------------------ Definição dos operadores

op_sumsub -> '+' | '-'
op_multdiv -> '*' | '/' | '%' | '//'
op_logic ->  '&&' | '||' 
op_comparator -> '>' | '>=' | '<' | '<=' | '==' | '!='